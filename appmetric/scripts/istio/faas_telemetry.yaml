# Configuration for metric instances
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: turborequestcountbypath
  namespace: istio-system
spec:
  value: "1"
  dimensions:
    source_app: source.labels["app"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
    destination_service: destination.service.host | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_app: destination.labels["app"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    request_path: request.path | ""
    response_code: response.code | 200
  monitored_resource_type: '"UNSPECIFIED"'
---
# Configuration for a Prometheus handler
apiVersion: "config.istio.io/v1alpha2"
kind: prometheus
metadata:
  name: turbofaashandler
  namespace: istio-system
spec:
  metrics:
  - name: turbo_request_count_by_path # Prometheus metric name
    instance_name: turborequestcountbypath.metric.istio-system # Mixer instance name (fully-qualified)
    kind: COUNTER
    label_names:
    - source_app
    - source_workload
    - source_workload_namespace
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - destination_app
    - destination_workload
    - destination_workload_namespace
    - request_path
    - response_code
---
# Rule to send metric instances to a Prometheus handler
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: turbofaasprom
  namespace: istio-system
spec:
  actions:
  - handler: turbofaashandler.prometheus
    instances:
    - turborequestcountbypath.metric
---
